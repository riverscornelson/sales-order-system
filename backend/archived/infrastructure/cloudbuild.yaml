# Cloud Build configuration for Sales Order Entry System
# Comprehensive CI/CD pipeline with testing, security scanning, and deployment

steps:
  # Run backend tests
  - name: 'python:3.11-slim'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        cd backend
        pip install -r requirements.txt
        python -m pytest tests/ -v --cov=app --cov-report=xml
    id: 'test-backend'
    env:
      - 'ENVIRONMENT=test'
      - 'ERP_PROVIDER=mock'

  # Run frontend tests
  - name: 'node:18-alpine'
    entrypoint: 'sh'
    args:
      - '-c'
      - |
        cd frontend
        npm ci
        npm run test -- --run
        npm run lint
    id: 'test-frontend'

  # Security scan - backend
  - name: 'gcr.io/gcp-runtimes/container-structure-test'
    args:
      - 'test'
      - '--image'
      - 'backend'
      - '--config'
      - 'infrastructure/security-test-config.yaml'
    id: 'security-scan-backend'
    waitFor: ['test-backend']

  # Build backend image with multi-stage optimization
  - name: 'gcr.io/cloud-builders/docker'
    args: 
      - 'build'
      - '--target'
      - 'production'
      - '-t'
      - 'gcr.io/$PROJECT_ID/sales-order-backend:$BUILD_ID'
      - '-t'
      - 'gcr.io/$PROJECT_ID/sales-order-backend:latest'
      - '-t'
      - 'gcr.io/$PROJECT_ID/sales-order-backend:$_ENVIRONMENT'
      - '--cache-from'
      - 'gcr.io/$PROJECT_ID/sales-order-backend:latest'
      - './backend'
    id: 'build-backend'
    waitFor: ['security-scan-backend']

  # Build frontend image with optimization
  - name: 'gcr.io/cloud-builders/docker'
    args:
      - 'build'
      - '--target'
      - 'production'
      - '-t'
      - 'gcr.io/$PROJECT_ID/sales-order-frontend:$BUILD_ID'
      - '-t'
      - 'gcr.io/$PROJECT_ID/sales-order-frontend:latest'
      - '-t'
      - 'gcr.io/$PROJECT_ID/sales-order-frontend:$_ENVIRONMENT'
      - '--cache-from'
      - 'gcr.io/$PROJECT_ID/sales-order-frontend:latest'
      - '--build-arg'
      - 'BACKEND_URL=$_BACKEND_URL'
      - './frontend'
    id: 'build-frontend'
    waitFor: ['test-frontend']

  # Vulnerability scanning
  - name: 'gcr.io/cloud-builders/gcloud'
    args:
      - 'components'
      - 'install'
      - 'local-extract'
    id: 'install-scanner'

  - name: 'gcr.io/cloud-builders/gcloud'
    args:
      - 'components'
      - 'install'
      - 'container-analysis'
    id: 'install-analysis'
    waitFor: ['install-scanner']

  # Push images to registry
  - name: 'gcr.io/cloud-builders/docker'
    args:
      - 'push'
      - 'gcr.io/$PROJECT_ID/sales-order-backend:$BUILD_ID'
    id: 'push-backend'
    waitFor: ['build-backend']

  - name: 'gcr.io/cloud-builders/docker'
    args:
      - 'push'
      - 'gcr.io/$PROJECT_ID/sales-order-frontend:$BUILD_ID'
    id: 'push-frontend'
    waitFor: ['build-frontend']

  # Deploy to staging first (if not production)
  - name: 'gcr.io/cloud-builders/gcloud'
    args:
      - 'run'
      - 'deploy'
      - 'sales-order-backend-$_ENVIRONMENT'
      - '--image'
      - 'gcr.io/$PROJECT_ID/sales-order-backend:$BUILD_ID'
      - '--platform'
      - 'managed'
      - '--region'
      - '$_REGION'
      - '--allow-unauthenticated'
      - '--service-account'
      - 'sales-order-backend-sa@$PROJECT_ID.iam.gserviceaccount.com'
      - '--set-env-vars'
      - 'ENVIRONMENT=$_ENVIRONMENT,GOOGLE_CLOUD_PROJECT=$PROJECT_ID,CLOUD_SQL_CONNECTION_NAME=$_CLOUD_SQL_CONNECTION_NAME,LOG_LEVEL=$_LOG_LEVEL'
      - '--set-secrets'
      - 'OPENAI_API_KEY=openai-api-key:latest,DATABASE_URL=database-url-$_ENVIRONMENT:latest'
      - '--add-cloudsql-instances'
      - '$_CLOUD_SQL_CONNECTION_NAME'
      - '--cpu'
      - '$_BACKEND_CPU'
      - '--memory'
      - '$_BACKEND_MEMORY'
      - '--min-instances'
      - '$_BACKEND_MIN_INSTANCES'
      - '--max-instances'
      - '$_BACKEND_MAX_INSTANCES'
      - '--port'
      - '8000'
      - '--concurrency'
      - '80'
      - '--timeout'
      - '300'
      - '--execution-environment'
      - 'gen2'
    id: 'deploy-backend'
    waitFor: ['push-backend']

  # Get backend URL for frontend deployment
  - name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        BACKEND_URL=$(gcloud run services describe sales-order-backend-$_ENVIRONMENT --region=$_REGION --format='value(status.url)')
        echo "Backend URL: $BACKEND_URL"
        echo $BACKEND_URL > /workspace/backend_url.txt
    id: 'get-backend-url'
    waitFor: ['deploy-backend']

  # Deploy frontend with backend URL
  - name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        BACKEND_URL=$(cat /workspace/backend_url.txt)
        gcloud run deploy sales-order-frontend-$_ENVIRONMENT \
          --image gcr.io/$PROJECT_ID/sales-order-frontend:$BUILD_ID \
          --platform managed \
          --region $_REGION \
          --allow-unauthenticated \
          --service-account sales-order-frontend-sa@$PROJECT_ID.iam.gserviceaccount.com \
          --set-env-vars BACKEND_URL=$BACKEND_URL,ENVIRONMENT=$_ENVIRONMENT \
          --cpu $_FRONTEND_CPU \
          --memory $_FRONTEND_MEMORY \
          --min-instances $_FRONTEND_MIN_INSTANCES \
          --max-instances $_FRONTEND_MAX_INSTANCES \
          --port 8080 \
          --concurrency 1000 \
          --timeout 60 \
          --execution-environment gen2
    id: 'deploy-frontend'
    waitFor: ['push-frontend', 'get-backend-url']

  # Run smoke tests
  - name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        FRONTEND_URL=$(gcloud run services describe sales-order-frontend-$_ENVIRONMENT --region=$_REGION --format='value(status.url)')
        BACKEND_URL=$(gcloud run services describe sales-order-backend-$_ENVIRONMENT --region=$_REGION --format='value(status.url)')
        echo "Testing frontend at: $FRONTEND_URL"
        echo "Testing backend at: $BACKEND_URL"
        
        # Test backend health
        curl -f $BACKEND_URL/health || exit 1
        
        # Test frontend health  
        curl -f $FRONTEND_URL/health || exit 1
        
        echo "Smoke tests passed!"
    id: 'smoke-tests'
    waitFor: ['deploy-frontend']

  # Update traffic (production only)
  - name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        if [ "$_ENVIRONMENT" = "production" ]; then
          echo "Updating production traffic..."
          gcloud run services update-traffic sales-order-backend-production --to-latest --region=$_REGION
          gcloud run services update-traffic sales-order-frontend-production --to-latest --region=$_REGION
          echo "Production deployment complete!"
        else
          echo "Non-production deployment - skipping traffic update"
        fi
    id: 'update-traffic'
    waitFor: ['smoke-tests']

# Environment-specific substitutions
substitutions:
  _ENVIRONMENT: 'dev'
  _REGION: 'us-central1'
  _CLOUD_SQL_CONNECTION_NAME: 'sales-order-system-${_ENVIRONMENT}:us-central1:sales-order-db'
  _LOG_LEVEL: 'INFO'
  _BACKEND_URL: 'https://sales-order-backend-${_ENVIRONMENT}-uc.a.run.app'
  
  # Backend resources
  _BACKEND_CPU: '1'
  _BACKEND_MEMORY: '2Gi'
  _BACKEND_MIN_INSTANCES: '0'
  _BACKEND_MAX_INSTANCES: '10'
  
  # Frontend resources  
  _FRONTEND_CPU: '1'
  _FRONTEND_MEMORY: '1Gi'
  _FRONTEND_MIN_INSTANCES: '0'
  _FRONTEND_MAX_INSTANCES: '5'

# Build options
options:
  logging: CLOUD_LOGGING_ONLY
  machineType: 'E2_HIGHCPU_8'
  substitution_option: 'ALLOW_LOOSE'
  
# Build timeout
timeout: '1800s'

# Available tags for triggering different environments
availableSecrets:
  secretManager:
  - versionName: projects/$PROJECT_ID/secrets/openai-api-key/versions/latest
    env: 'OPENAI_API_KEY'
  - versionName: projects/$PROJECT_ID/secrets/database-url-${_ENVIRONMENT}/versions/latest
    env: 'DATABASE_URL'